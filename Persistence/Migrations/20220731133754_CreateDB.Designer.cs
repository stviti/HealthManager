// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220731133754_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.Entities.BasePrivateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("BasePrivateEntity");
                });

            modelBuilder.Entity("Medications_HealthRecords", b =>
                {
                    b.Property<Guid>("HealthRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicationId")
                        .HasColumnType("uuid");

                    b.HasKey("HealthRecordId", "MedicationId");

                    b.HasIndex("MedicationId");

                    b.ToTable("Medications_HealthRecords");
                });

            modelBuilder.Entity("Symtpoms_HealthRecords", b =>
                {
                    b.Property<Guid>("HealthRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SymtpomId")
                        .HasColumnType("uuid");

                    b.HasKey("HealthRecordId", "SymtpomId");

                    b.HasIndex("SymtpomId");

                    b.ToTable("Symtpoms_HealthRecords");
                });

            modelBuilder.Entity("Domain.Entities.DoctorVisit.DoctorVisitEntity", b =>
                {
                    b.HasBaseType("Domain.Entities.BasePrivateEntity");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.ToTable("DoctorVisits");
                });

            modelBuilder.Entity("Domain.Entities.HealthRecord.HealthRecordEntity", b =>
                {
                    b.HasBaseType("Domain.Entities.BasePrivateEntity");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("Domain.Entities.HealthRecord.MedicationEntity", b =>
                {
                    b.HasBaseType("Domain.Entities.BasePrivateEntity");

                    b.Property<string>("Dose")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("Domain.Entities.HealthRecord.SymptomEntity", b =>
                {
                    b.HasBaseType("Domain.Entities.BasePrivateEntity");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("Domain.Entities.SleepRecord.SleepRecordEntity", b =>
                {
                    b.HasBaseType("Domain.Entities.BasePrivateEntity");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.ToTable("SleepRecords");
                });

            modelBuilder.Entity("Domain.Entities.Treatment.TreatmentEntity", b =>
                {
                    b.HasBaseType("Domain.Entities.BasePrivateEntity");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("RepeatOccurencies")
                        .HasColumnType("integer");

                    b.Property<int>("RepeatOffset")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("Medications_HealthRecords", b =>
                {
                    b.HasOne("Domain.Entities.HealthRecord.HealthRecordEntity", null)
                        .WithMany()
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.HealthRecord.MedicationEntity", null)
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Symtpoms_HealthRecords", b =>
                {
                    b.HasOne("Domain.Entities.HealthRecord.HealthRecordEntity", null)
                        .WithMany()
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.HealthRecord.SymptomEntity", null)
                        .WithMany()
                        .HasForeignKey("SymtpomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.DoctorVisit.DoctorVisitEntity", b =>
                {
                    b.HasOne("Domain.Entities.BasePrivateEntity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.DoctorVisit.DoctorVisitEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.HealthRecord.HealthRecordEntity", b =>
                {
                    b.HasOne("Domain.Entities.BasePrivateEntity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.HealthRecord.HealthRecordEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.HealthRecord.MedicationEntity", b =>
                {
                    b.HasOne("Domain.Entities.BasePrivateEntity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.HealthRecord.MedicationEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.HealthRecord.SymptomEntity", b =>
                {
                    b.HasOne("Domain.Entities.BasePrivateEntity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.HealthRecord.SymptomEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.SleepRecord.SleepRecordEntity", b =>
                {
                    b.HasOne("Domain.Entities.BasePrivateEntity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.SleepRecord.SleepRecordEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Treatment.TreatmentEntity", b =>
                {
                    b.HasOne("Domain.Entities.BasePrivateEntity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Treatment.TreatmentEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
